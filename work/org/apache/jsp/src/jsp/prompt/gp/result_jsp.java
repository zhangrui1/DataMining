/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.41
 * Generated at: 2014-03-18 04:39:38 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.src.jsp.prompt.gp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.LinkedHashMap;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.text.NumberFormat;

public final class result_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	// パラメータの取得
	String backURL = (String) request.getAttribute("backURL");
	String[] days = (String[]) request.getAttribute("days");
	@SuppressWarnings("unchecked")
	List<Integer> newRegist = (ArrayList<Integer>) request
			.getAttribute("newRegist");
	@SuppressWarnings("unchecked")
	List<Integer> repeat = (ArrayList<Integer>) request
			.getAttribute("repeat");
	@SuppressWarnings("unchecked")
	List<Integer> dupRegist = (ArrayList<Integer>) request
			.getAttribute("dupRegist");
	@SuppressWarnings("unchecked")
	Map<String, Integer> repeatDetail1 = (LinkedHashMap<String, Integer>) request
			.getAttribute("repeatDetail1");
	@SuppressWarnings("unchecked")
	Map<String, Integer> repeatDetail2 = (LinkedHashMap<String, Integer>) request
			.getAttribute("repeatDetail2");
	@SuppressWarnings("unchecked")
	Map<String, Integer> repeatDetail3 = (LinkedHashMap<String, Integer>) request
			.getAttribute("repeatDetail3");
	@SuppressWarnings("unchecked")
	Map<String, Integer> repeatDetail4 = (LinkedHashMap<String, Integer>) request
			.getAttribute("repeatDetail4");
	int totalNewRegist = (Integer) request
			.getAttribute("totalNewRegist");
	int totalRepeat = (Integer) request.getAttribute("totalRepeat");
	int totaldupRegist = (Integer) request
			.getAttribute("totaldupRegist");

	NumberFormat nfNum = NumberFormat.getNumberInstance();

      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<title>集計結果</title>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("html,body {\r\n");
      out.write("\theight: 100%;\r\n");
      out.write("} /*高さ100%に指定*/\r\n");
      out.write(".centerMiddle {\r\n");
      out.write("\tmargin: -200px 0 0 -300px; /*縦横の半分をネガティブマージンでずらす*/\r\n");
      out.write("\tposition: absolute; /*body要素に対して絶対配置*/\r\n");
      out.write("\ttop: 30%; /*上端を中央に*/\r\n");
      out.write("\tleft: 50%; /*左端を中央に*/\r\n");
      out.write("\twidth: 600px; /*横幅*/\r\n");
      out.write("\theight: 400px; /*縦幅*/\r\n");
      out.write("\tbackground-color: #fff;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#mytable {\r\n");
      out.write("\twidth: 700px;\r\n");
      out.write("\tmargin: 0 0 0 1px;\r\n");
      out.write("\tpadding: 0;\r\n");
      out.write("\tborder: 0;\r\n");
      out.write("\tborder-spacing: 0;\r\n");
      out.write("\tborder-collapse: collapse;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("caption {\r\n");
      out.write("\tpadding: 0 0 5px 0;\r\n");
      out.write("\tfont: italic 11px \"Trebuchet MS\", Verdana, Arial, Helvetica, sans-serif;\r\n");
      out.write("\ttext-align: right;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("th {\r\n");
      out.write("\tfont: bold 11px \"Trebuchet MS\", Verdana, Arial, Helvetica, sans-serif;\r\n");
      out.write("\tcolor: #4f6b72;\r\n");
      out.write("\tborder: 1px solid #c1dad7;\r\n");
      out.write("\tletter-spacing: 2px;\r\n");
      out.write("\ttext-transform: uppercase;\r\n");
      out.write("\ttext-align: left;\r\n");
      out.write("\tpadding: 6px 6px 6px 12px;\r\n");
      out.write("\tbackground: #cae8ea url(\"img/css/bg_header.jpg\") no-repeat;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("th.nobg {\r\n");
      out.write("\tborder-top: 0;\r\n");
      out.write("\tborder-left: 0;\r\n");
      out.write("\tbackground: none;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("td {\r\n");
      out.write("\tborder: 1px solid #c1dad7;\r\n");
      out.write("\tbackground: #fff;\r\n");
      out.write("\tpadding: 6px 6px 6px 12px;\r\n");
      out.write("\tcolor: #4f6b72;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("td.alt {\r\n");
      out.write("\tbackground: #F5FAFA;\r\n");
      out.write("\tcolor: #797268;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("th.spec {\r\n");
      out.write("\tbackground: #fff url(\"img/css/bullet1.gif\") no-repeat;\r\n");
      out.write("\tfont: bold 10px \"Trebuchet MS\", Verdana, Arial, Helvetica, sans-serif;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("th.specalt {\r\n");
      out.write("\tbackground: #f5fafa url(\"img/css/bullet2.gif\") no-repeat;\r\n");
      out.write("\tfont: bold 10px \"Trebuchet MS\", Verdana, Arial, Helvetica, sans-serif;\r\n");
      out.write("\tcolor: #797268;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<div align=\"center\">\r\n");
      out.write("\t\t<table id=\"mytable\" width=\"100%\" style=\"BACKGROUND-COLOR: #a9a9a9\">\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<th></th>\r\n");
      out.write("\t\t\t\t<th>総数（重複含）</th>\r\n");
      out.write("\t\t\t\t<th>新規登録数</th>\r\n");
      out.write("\t\t\t\t<th>リピーター数</th>\r\n");
      out.write("\t\t\t\t<th>当日のみ</th>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t");

				for (int nIndex = 0; nIndex < days.length; nIndex++) {
			
      out.write("\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<th>");
      out.print(days[nIndex] + "日");
      out.write("</th>\r\n");
      out.write("\t\t\t\t<td class=\"alt\" align=\"right\">");
      out.print(nfNum.format(dupRegist.get(nIndex)));
      out.write("</td>\r\n");
      out.write("\t\t\t\t<td class=\"alt\" align=\"right\">");
      out.print(nfNum.format(newRegist.get(nIndex)));
      out.write("</td>\r\n");
      out.write("\t\t\t\t<td class=\"alt\" align=\"right\">");
      out.print(nfNum.format(repeat.get(nIndex)));
      out.write("</td>\r\n");
      out.write("\t\t\t\t<td class=\"alt\" align=\"right\">");
      out.print(nfNum.format(newRegist.get(nIndex)
						+ repeat.get(nIndex)));
      out.write("</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t");

				}
			
      out.write("\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td class=\"alt\" align=\"left\">合計</td>\r\n");
      out.write("\t\t\t\t<td class=\"alt\" align=\"right\">");
      out.print(nfNum.format(totaldupRegist));
      out.write("</td>\r\n");
      out.write("\t\t\t\t<td class=\"alt\" align=\"right\">");
      out.print(nfNum.format(totalNewRegist));
      out.write("</td>\r\n");
      out.write("\t\t\t\t<td class=\"alt\" align=\"right\">");
      out.print(nfNum.format(totalRepeat));
      out.write("</td>\r\n");
      out.write("\t\t\t\t<td class=\"alt\" align=\"right\">");
      out.print(nfNum.format(totalNewRegist + totalRepeat));
      out.write("</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t</table>\r\n");
      out.write("\t\t<br /> <br />\r\n");
      out.write("\t\t");

			if (days.length >= 3) {
		
      out.write("\r\n");
      out.write("\t\t<table id=\"mytable\" width=\"100%\" style=\"BACKGROUND-COLOR: #a9a9a9\">\r\n");
      out.write("\t\t\t<caption>");
      out.print(days[2]);
      out.write("日のリピーター詳細</caption>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t");

					List<Map.Entry<String, Integer>> entries3 = new ArrayList<Map.Entry<String, Integer>>(
								repeatDetail3.entrySet());
						for (Map.Entry<String, Integer> entry : entries3) {
				
      out.write("\r\n");
      out.write("\t\t\t\t<th>");
      out.print(entry.getKey());
      out.write("</th>\r\n");
      out.write("\t\t\t\t");

					}
				
      out.write("\r\n");
      out.write("\t\t\t\t<th>リピーター合計</th>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t");

					for (Map.Entry<String, Integer> entry : entries3) {
				
      out.write("\r\n");
      out.write("\t\t\t\t<td class=\"alt\" align=\"right\">");
      out.print(nfNum.format(entry.getValue()));
      out.write("</td>\r\n");
      out.write("\t\t\t\t");

					}
				
      out.write("\r\n");
      out.write("\t\t\t\t<td class=\"alt\" align=\"right\">");
      out.print(nfNum.format(repeat.get(2)));
      out.write("</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t</table>\r\n");
      out.write("\t\t");

			}
		
      out.write("\r\n");
      out.write("\t\t");

			if (days.length >= 4) {
		
      out.write("\r\n");
      out.write("\t\t<table id=\"mytable\" width=\"100%\" style=\"BACKGROUND-COLOR: #a9a9a9\">\r\n");
      out.write("\t\t\t<caption>");
      out.print(days[3]);
      out.write("日のリピーター詳細</caption>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t");

					List<Map.Entry<String, Integer>> entries4 = new ArrayList<Map.Entry<String, Integer>>(
								repeatDetail4.entrySet());
						for (Map.Entry<String, Integer> entry : entries4) {
				
      out.write("\r\n");
      out.write("\t\t\t\t<th>");
      out.print(entry.getKey());
      out.write("</th>\r\n");
      out.write("\t\t\t\t");

					}
				
      out.write("\r\n");
      out.write("\t\t\t\t<th>リピーター合計</th>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t");

					for (Map.Entry<String, Integer> entry : entries4) {
				
      out.write("\r\n");
      out.write("\t\t\t\t<td class=\"alt\" align=\"right\">");
      out.print(nfNum.format(entry.getValue()));
      out.write("</td>\r\n");
      out.write("\t\t\t\t");

					}
				
      out.write("\r\n");
      out.write("\t\t\t\t<td class=\"alt\" align=\"right\">");
      out.print(nfNum.format(repeat.get(3)));
      out.write("</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t</table>\r\n");
      out.write("\t\t");

			}
		
      out.write("\r\n");
      out.write("\t\t<br /> <br /> <a href=\"");
      out.print(backURL);
      out.write("\">もどる</a> <br /> <br />\r\n");
      out.write("\t</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
